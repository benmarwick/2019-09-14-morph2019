[{"authors":null,"categories":null,"content":" To create a reproducible research compendium step-by-step using the rrtools approach, follow these detailed instructions. We use RStudio, and recommend it, but is not required for these steps to work. We recommend copy-pasting these directly into your console, and editing the options before running. We don\u0026rsquo;t recommend saving these lines in a script in your project: they are meant to be once-off setup functions run at the console.\nPlease start by:\n Got to GitHub and register for a free account. Logging into our https://rstudio.cloud/project/493309, use your GitHub account to log in  We will run the workshop code in the rstudio.cloud service because it will save us time. I have already installed many packages there, so we don\u0026rsquo;t have to wait for that in the workshop.\nCreate a basic R package Run this line:\nrrtools::use_compendium(\u0026quot;pkgname\u0026quot;)   this uses usethis::create_package() to create a basic R package with the name pkgname (you should use a different one), and then, if you\u0026rsquo;re using RStudio, opens the project. If you\u0026rsquo;re not using RStudio, it sets the working directory to the pkgname directory. we need to:  choose a location for the compendium package. We recommend you set the working directory in RStudio using the drop-down menu: Session -\u0026gt; Set Working Directory and then run rrtools::use_compendium(\u0026quot;pkgname\u0026quot;). edit the DESCRIPTION file (located in your pkgname directory) to include accurate metadata periodically update the Imports: section of the DESCRIPTION file with the names of packages used in the code we write in the Rmd document(s) (e.g., usethis::use_package(\u0026quot;dplyr\u0026quot;, \u0026quot;imports\u0026quot;))   Attach a license to our compendium Run this line:\nusethis::use_mit_license(name = \u0026quot;My Name\u0026quot;)   this adds a reference to the MIT license in the DESCRIPTION file and generates a LICENSE file listing the name provided as the copyright holder to use a different license, replace this line with usethis::use_gpl3_license(name = \u0026quot;My Name\u0026quot;), or follow the instructions for other licenses  Start version control and make a GitHub repository for our compendium Then run this line to tell Git who we are on your computer:\nusethis::use_git_config(user.name = \u0026quot;Jane Doe\u0026quot;, user.email = \u0026quot;jane@example.com\u0026quot;)  Then run these lines:\nusethis::use_git() # open up the GitHub panel to generate # your Personal Authorisation Token (PAT) usethis::browse_github_pat() # get a token from https://github.com/settings/tokens  After you get the token from GitHub, save it in your environment:\nusethis::edit_r_environ() # Paste your copied PAT into your .Renviron file as system variable: # GITHUB_PAT=XXXXXX  Restart R, then run this line:\nusethis::use_github(protocol = \u0026quot;https\u0026quot;, private = FALSE)   if you are connected to the internet, this initializes a local git repository (use_git()), then use_github() connects to GitHub, and creates a remote repository if you are not connected to the internet, use use_git() to initialise a local git repository for your project, and save the use_github step for when you are online. Reopen your project in RStudio to see the git buttons on the toolbar. we need to:  install and configure git before running this line. See Happy Git With R for details on how to do this. Make sure to set up a SSH key to connect to your Github account conveniently. get a personal access token, and replace \u0026ldquo;xxxx\u0026rdquo; with that token. When you do so (click \u0026ldquo;Generate new token\u0026rdquo;), make sure the \u0026ldquo;repo\u0026rdquo; scope is included by checking the \u0026ldquo;repo\u0026rdquo; box. Don\u0026rsquo;t save this token in your project, keep it elsewhere.   Make a readme document, a code of conduct and a guide for contributors Run this line:\nrrtools::use_readme_rmd()  Then commit and push to GitHub, then browse your files on GitHub and see how the Readme file looks.\n this generates README.Rmd and renders it to README.md, ready to display on GitHub. It contains:  a template citation to show others how to cite your project. Edit this to include the correct title and DOI. license information for the text, figures, code and data in your compendium  this also adds two other markdown files: a code of conduct for users CONDUCT.md, and basic instructions for people who want to contribute to your project CONTRIBUTING.md, including for first-timers to git and GitHub. render this document after each change to refresh README.md, which is the file that GitHub displays on the repository home page  Create a compendium file structure and add template files Run this line:\nrrtools::use_analysis()  Then knit the Rmd document right away to see how the template looks.\n this function has three location = options: top_level to create a top-level analysis/ directory, inst to create an inst/ directory (so that all the sub-directories are available after the package is installed), and vignettes to create a vignettes/ directory (and automatically update the DESCRIPTION). The default is a top-level analysis/. for each option, the contents of the sub-directories are the same, with the following (using the default analysis/ for example):\nanalysis/ | ├── paper/ │ ├── paper.Rmd # this is the main document to edit │ └── references.bib # this contains the reference list information ├── figures/ # location of the figures produced by the Rmd | ├── data/ │ ├── raw_data/ # data obtained from elsewhere │ └── derived_data/ # data generated during the analysis | └── templates ├── journal-of-archaeological-science.csl | # this sets the style of citations \u0026amp; reference list ├── template.docx # used to style the output of the paper.Rmd └── template.Rmd  the paper.Rmd is ready to write in and render with bookdown. It includes:\n a YAML header that identifies the references.bib file and the supplied csl file (to style the reference list) a colophon that adds some git commit details to the end of the document. This means that the output file (HTML/PDF/Word) is always traceable to a specific state of the code.  the references.bib file has just one item to demonstrate the format. It is ready to insert more reference details.\n you can replace the supplied csl file with a different citation style from https://github.com/citation-style-language/\n we recommend using the citr addin and Zotero to efficiently insert citations while writing in an Rmd file\n remember that the Imports: field in the DESCRIPTION file must include the names of all packages used in analysis documents (e.g. paper.Rmd). We have a helper function rrtools::add_dependencies_to_description() that will scan the Rmd file, identify libraries used in there, and add them to the DESCRIPTION file.\n this function has an data_in_git = argument, which is TRUE by default. If set to FALSE you will exclude files in the data/ directory from being tracked by git and prevent them from appearing on GitHub. You should set data_in_git = FALSE if your data files are large (\u0026gt;100 mb is the limit for GitHub) or you do not want to make the data files publicly accessible on GitHub.\n To load your custom code in the paper.Rmd, you have a few options. You can write all your R code in chunks in the Rmd, that\u0026rsquo;s the simplest method. Or you can write R code in script files in /R, and include devtools::load_all(\u0026quot;.\u0026quot;) at the top of your paper.Rmd. Or you can write functions in /R and use library(pkgname) at the top of your paper.Rmd, or omit library and preface each function call with pkgname::. Up to you to choose whatever seems most natural to you.   ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"49625d69f8ef8b434079f1f5480fe1ba","permalink":"https://benmarwick.github.io/2019-09-14-morph2019/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/2019-09-14-morph2019/example1/","section":"","summary":"To create a reproducible research compendium step-by-step using the rrtools approach, follow these detailed instructions. We use RStudio, and recommend it, but is not required for these steps to work. We recommend copy-pasting these directly into your console, and editing the options before running. We don\u0026rsquo;t recommend saving these lines in a script in your project: they are meant to be once-off setup functions run at the console.\nPlease start by:","tags":null,"title":"Creating a reproducible research compendium","type":"docs"},{"authors":null,"categories":null,"content":" For these activities we will use code and data from the excellent article by Hoggard et al. 2019. The authors have made their materials online at https://osf.io/g29eu/. I have slightly modified the code from the original.\nCode chunks, in-line code We are going to do live-coding demonstration of how to import data into R in our paper.Rmd. You need to save this to your computer (click to download):\nHoggard_et_al_2019_raw_data.zip\nThen upload to analysis/data/raw-data, it will unzip into two files.\nNow add a chunk of code to your paper.Rmd that looks exactly like this:\n```{r get-data} database \u0026lt;- read_csv(here::here('analysis/data/raw_data/Hoggard_et_al_2019.csv')) tpsfile \u0026lt;- read_rds(here::here('analysis/data/raw_data/Hoggard_et_al_2019_tps.rds')) ```  To use in-line R code, we can write short sentence in our paper.Rmd like this, with the single backticks:\n The data has `r nrow(database)` specimens  Now knit the document and inspect the output.\nUsing external code Now we will insert into our paper.Rmd some external R code that is in an R script file. Sometimes we don\u0026rsquo;t want to have all our R code in the paper.Rmd because it makes it hard to read and navigate. You need to save this R script file to your computer (right-click, \u0026lsquo;save link as\u0026rsquo; to download):\nHoggard_et_al_2019_BM.R\nThen upload it to analysis/paper.\nHere is the pattern to include code from the R script file into your paper.Rmd: First we use knitr::read_chunk to identify our R script file. Then in the R code chunks we can reference the names of sections in that R script file. To try this, you need to copy and paste these lines into your paper.Rmd:\n```{r} knitr::read_chunk('Hoggard_et_al_2019_BM.R') ``` ```{r Compute-symmetry-and-PCA} ``` ```{r figure-1} ``` ```{r figure-3} ``` ```{r table-3} ```  Captions \u0026amp; cross-references There are two commonly used methods to add captions. First is in the code chunk header, like this:\n```{r figure-1, fig.cap = \u0026quot;An exploration of biface shape and Marine Isotope Stage (MIS) through an elliptic Fourier principal component analysis (EFA-PCA). Confidence ellipses are here set to two-thirds (66.66%)\u0026quot;} ```  And the second way is outside of the code chunk using the (ref:xxx) pattern. This method is useful if you want to format the text or use inline R code in the caption:\n(ref:figure-3-caption) An examination of symmetry (AD harmonic coefficients/amplitude) through a histogram (a), and two box-and-whisker plots (Tukey style) examining symmetry against individual Marine Isotope Stage (b), and against individual sites (c) ```{r figure-3, fig.cap = '(ref:figure-3-caption)'} ```  To cross-reference a plot produced by a code chunk, we use the pattern \\@ref(fig:label), where label is the code chunk ID. To cross-reference Figure 3, we would write this:\n Please see Figure \\@ref(fig:figure-3)  And after we knit, we will see \u0026lsquo;Please see Figure 3\u0026rsquo;\nFigures and tables Often we want to include figures in our paper that are not generated by R code. For example, photographs or drawings.\n```{r my-photo, fig.cap = \u0026quot;My photo\u0026quot;} knitr::include_graphics() ```  Citations and references ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"b8afc25f214e817b27884a8d684c9a44","permalink":"https://benmarwick.github.io/2019-09-14-morph2019/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/2019-09-14-morph2019/example2/","section":"","summary":"For these activities we will use code and data from the excellent article by Hoggard et al. 2019. The authors have made their materials online at https://osf.io/g29eu/. I have slightly modified the code from the original.\nCode chunks, in-line code We are going to do live-coding demonstration of how to import data into R in our paper.Rmd. You need to save this to your computer (click to download):\nHoggard_et_al_2019_raw_data.zip","tags":null,"title":"Writing with R Markdown","type":"docs"}]